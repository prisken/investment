name: Investment App CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC for security updates
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  EXPO_VERSION: '~50.0.0'

jobs:
  # Backend Testing & Quality Checks
  backend-test:
    name: Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: investment_app_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run backend tests
      working-directory: ./backend
      env:
        NODE_ENV: test
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_NAME: investment_app_test
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
      run: npm test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint

    - name: Upload backend coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Testing & Quality Checks
  frontend-test:
    name: Frontend Tests & Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Run frontend linting
      run: npm run lint

    - name: Type check
      run: npx tsc --noEmit

    - name: Run frontend tests
      run: npm test

  # Security & Dependency Scanning
  security:
    name: Security & Dependencies
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Run security audit
      run: |
        npm audit --audit-level=moderate
        cd backend && npm audit --audit-level=moderate

    - name: Check for outdated dependencies
      run: |
        npm outdated
        cd backend && npm outdated

  # Build & Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Build frontend
      run: npm run build

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: Railway, Render, or other hosting services

  # Build & Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, security]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        cd backend && npm ci

    - name: Build frontend
      run: npm run build

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: Railway, Render, or other hosting services

  # Database Backup
  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    schedule:
      - cron: '0 3 * * *' # Daily at 3 AM UTC

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create database backup
      working-directory: ./backend
      env:
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_PORT: ${{ secrets.DB_PORT }}
        DB_NAME: ${{ secrets.DB_NAME }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        # Add your database backup script here
        echo "Creating database backup..."
        # Example: pg_dump or custom backup script

    - name: Upload backup artifact
      uses: actions/upload-artifact@v3
      with:
        name: database-backup-$(date +%Y%m%d)
        path: ./backend/backups/
        retention-days: 30

  # Performance & Load Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [deploy-production]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: Run performance tests
      working-directory: ./backend
      run: |
        # Add your performance testing commands here
        echo "Running performance tests..."
        # Example: Artillery, k6, or custom performance tests

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: ./backend/performance-reports/
        retention-days: 90
