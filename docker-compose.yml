version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: investment_app_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: investment_app_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schemas/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - investment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: investment_app_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - investment_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: investment_app_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: investment_app_dev
      DB_USER: postgres
      DB_PASSWORD: password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - investment_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Native Web
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: investment_app_frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:3000
      REACT_APP_WS_URL: ws://localhost:3000
    ports:
      - "19006:19006"
    volumes:
      - .:/app
      - /app/node_modules
      - /app/backend/node_modules
    depends_on:
      - backend
    networks:
      - investment_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:19006"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: investment_app_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - investment_network

  # Backup Service
  backup:
    build:
      context: ./backend
      dockerfile: Dockerfile.backup
    container_name: investment_app_backup
    restart: "no"
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: investment_app_dev
      DB_USER: postgres
      DB_PASSWORD: password
      BACKUP_SCHEDULE: "0 3 * * *"  # Daily at 3 AM
      UPLOAD_BACKUPS: "false"
      CLOUD_PROVIDER: "local"
    volumes:
      - ./backend/backups:/app/backups
      - ./backend/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - investment_network
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  investment_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
